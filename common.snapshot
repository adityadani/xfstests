##/bin/bash
#
# Copyright (c) 2000-2001,2005 Silicon Graphics, Inc.
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#
# Functions useful for snapshot tests
#

TESTDIR=test1

_list_snapshots()
{
	case "$FSTYP" in
  
	  ext4dev)
		ls $SNAPDIR/ 2> /dev/null
	  	;;

	  btrfs)
	    btrfs subvolume list $1 2> /dev/null
		;;	
	esac
	 	
}

_delete_all_snapshots()
{
	case "$FSTYP" in

	  ext4dev)
	    for $s in $( _list_snapshots ) ; do
			ext4dev delete $s 2> /dev/null
		done
		for $s in $( _list_snapshots ) ; do
			ext4dev remove $s 2> /dev/null
		done
		;;

	  btrfs)
		cd $TEST_DIR
		for s in $( _list_snapshots . | while read a b c d e f g ; \
		do (echo $g) done) ; do
    	    btrfs subvolume delete $s > /dev/null 
		done
		cd - > /dev/null
		;;
	esac

}

_take_snapshot()
{
	case "$FSTYP" in

	  ext4dev)
	    ext4dev take $1 > /dev/null || exit 1
		;;

	  btrfs)
	    btrfs subvolume snapshot $TEST_DIR $TEST_DIR/$1  > /dev/null || exit 1
		;;	
	esac
	    
}

_stat()
{
	echo "Mounted filesystem :"
	df -h $TEST_DEV 2>/dev/null
	echo .
	echo "Snapshots list : "
	echo "id inode disk-usage mtime filename"
	echo "---------------------------------------------"
	for s in $( _list_snapshots $TEST_DIR | while read a b c d e f g ; \
	do (echo $g) ; done) ; do
	   	echo "My id : $id"
		( echo "$( du -sh $TEST_DIR/$s ) " ; \
			echo "$( ls -lih --color=never $TEST_DIR/$s ) " ) | \
		( read du b ; read ino c d e f g mm dd tt fname h ; \
			echo $id $ino $du $mm $dd $tt $fname )
	done 2> /dev/null
	echo .
}


_mktest()
{
    mkdir $TEST_DIR/A 2>/dev/null
    mkdir $TEST_DIR/B 2>/dev/null
    mkdir $TEST_DIR/C 2>/dev/null
    mkdir $TEST_DIR/D 2>/dev/null
    mkdir $TEST_DIR/E 2>/dev/null

    echo aligator > $TEST_DIR/A/a.txt
    echo bison > $TEST_DIR/B/b.txt
    echo camel > $TEST_DIR/C/c.txt

    #create non-snapshot dir 
    mkdir -p $TEST_DIR/$TESTDIR
}

_rmtest()
{
    rm -rf $TEST_DIR/? 2> /dev/null
    rm -rf $TEST_DIR/$TESTDIR 2> /dev/null
}


_lstest()
{
    if [ -z $1 ] ; then
	echo Files in file system
	d=$TEST_DIR
    else
	echo Files in snapshot $1
	d=$TEST_DIR/$1
    fi
    if [ -d $d ] ; then
	cd $d > /dev/null
	grep -v xxx ?/*
	test -e $TESTDIR/md5list && (cd $TESTDIR ; md5sum -c md5list || exit 1) 
	cd - > /dev/null
    fi
}


_snapshot_test()
{
    if [ $n = 0 ] ; then
	_rmtest
	exit 0
    fi
    _mktest
    echo
    echo Running snapshot test $n:
    echo ------------------------

    sleep 1 # A default delay of 1 sec introduced
    M=1     # A default file size = 1 mb

    F=${M}M
    cd $TEST_DIR/$TESTDIR > /dev/null
    NOTRUNC="conv=notrunc"
    # uncomment the following line to run in-place write tests
    INPLACE=$NOTRUNC
    # uncomment the following line to run direct I/O write tests
    DIRECT="oflag=direct"
    TRUNCSIZE=4
    echo Appending $F zeros to $F.1 $DIRECT
    dd if=/dev/zero bs=1M count=$M of=$F.1 $NOTRUNC oflag=append $DIRECT status=noxfer || exit 1
    echo Writing $F random data to $n files
    for i in $( seq 1 $n ) ; do
       	# 1st rewrite moves existing blocks to snapshot and allocates new blocks
	dd if=/dev/urandom bs=1M count=$M of=$F.$i $INPLACE status=noxfer || exit 1
       	# subsequent rewrites doesn't move blocks to snapshot
        dd if=/dev/urandom bs=1M count=$M of=$F.1 $INPLACE $DIRECT status=noxfer || exit 1
    done
    for i in $( seq 1 $n ) ; do
	md5sum $F.$i || exit 1
    done > md5list
    cd - > /dev/null
    _lstest || exit 1
    s=$n
    echo "----"
    echo "$s"
    echo "----"
	_take_snapshot $s
    case $n in
	1)
	    echo Create test:
	    echo ------------
	    echo 'Cerating d.txt'
	    echo dodo > $TEST_DIR/D/d.txt
	    echo 'Creating e.txt'
	    echo emu > $TEST_DIR/E/e.txt
	;;
	2)
	    echo Write test:
	    echo -----------
	    echo 'Writing b.txt (append)'
	    echo 'barracuda' >> $TEST_DIR/B/b.txt
	    echo 'Writing c.txt (truncate)'
	    echo 'crocodile' > $TEST_DIR/C/c.txt
	;;
	3)
	    echo Remove test:
	    echo ------------
	    echo "Truncating c.txt (to size $TRUNCSIZE)"
	    truncate -s $TRUNCSIZE $TEST_DIR/C/c.txt
	    echo 'Removing d.txt'
	    rm $TEST_DIR/D/d.txt
	;;
	4)
	    echo Restore test:
	    echo -------------
		case "$FSTYP" in

		  btrfs)
		    cd $TEST_DIR
	    	f=$( _list_snapshots . | head -n 1 | while read a b c d e f g ; do (echo $g) done)
	   		g=`expr $f + 1`
	  		h=`expr $g + 1`
	 	    i=`expr $h + 1`
		    mkdir /media/$f
			echo 'Restoring from snapshot' $f
			mount -t btrfs -o subvol=$f $TEST_DEV /media/$f 
			rm -rf `ls . | grep -v --regexp=[$f$g$h$i]` 
	  		cp -R /media/$f/? $TEST_DIR/ 
	    	cd - > /dev/null
	    	umount /media/$f || exit 1
	    	rm -r /media/$f
			;;

		  ext4dev)
		    f=$( ls -v $SNAPDIR/ | head -n 1 )
			echo 'Restoring from snapshot' $f
			ext4dev mount $f || exit 1
			rm -rf $TEST_DIR/?
			cp -R $SNAPMNT$f/? $TEST_DIR/
			ext4dev umount $f || exit 1
			;;
		
		esac
	;;
	esac || exit 1
    _lstest || exit 1
    _lstest $s || exit 1
   # _stat
    # need to display status of filesystem and its snapshots here		
}
