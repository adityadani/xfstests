#! /bin/bash
# FS QA Test No. 257
#
# File System snapshot tests (large files)
#
#-----------------------------------------------------------------------
# Copyright (c) 2011 YOUR NAME HERE.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#
# creator
owner=aditya.dani@gmail.com@

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common.rc
. ./common.filter
. ./common.snapshot

# real QA test starts here

# Modify as appropriate.
_supported_fs generic
_supported_os IRIX Linux


if [ -z $SNAPDIR ] ; then
# directory inside $FSTYPE filesystem to store
# snapshot subvolumes/snapshot files
SNAPDIR=$TEST_DIR/.snapshots
fi


if [ $FSTYP = ext4dev ] ; then  
    
    if [ -z $SNAPMNT ] ; then
	# directory prefix for snapshot mount points
	# snaphot mount points will be created as $SNAPMNT<snapshot-name>
	# default to ZFS snapshot naming convention <filesystem>@<snapshot>
	SNAPMNT=$TEST_DIR@
    fi
else
	cd $TEST_DIR
	mkdir .snapshots
	cd - > /dev/null
	# btrfs snapshots are mounted on $TEST_DIR/.snapshots/$s
	SNAPMNT=$SNAPDIR/
fi

    
N=4

# delete all the previously present snapshots
_delete_all_snapshots

# delete previous test files
_rmtest
_mktest

G=1
size=${G}G

for n in $( seq 1 $N ) ; do
    echo "$n"
   _snapshot_test $size || exit 1
done
_lstest
for n in $( seq 1 $N ) ; do
    _lstest $n
done

_unmount

# optional stuff if your test has verbose output to help resolve problems
#echo
#echo "If failure, check $seq.full (this) and $seq.full.ok (reference)"

# success, all done
status=0
exit
